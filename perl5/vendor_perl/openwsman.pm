# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package openwsman;
use base qw(Exporter);
use base qw(DynaLoader);
package openwsmanc;
bootstrap openwsman;
package openwsman;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package openwsman;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package openwsman;

*wsman_send_request = *openwsmanc::wsman_send_request;
*wsmc_transport_set_auth_request_func = *openwsmanc::wsmc_transport_set_auth_request_func;
*wsman_is_auth_method = *openwsmanc::wsman_is_auth_method;
*wsmc_transport_init = *openwsmanc::wsmc_transport_init;
*wsman_transport_close_transport = *openwsmanc::wsman_transport_close_transport;
*wsmc_transport_fini = *openwsmanc::wsmc_transport_fini;
*wsman_transport_set_agent = *openwsmanc::wsman_transport_set_agent;
*wsman_transport_get_agent = *openwsmanc::wsman_transport_get_agent;
*wsman_transport_set_userName = *openwsmanc::wsman_transport_set_userName;
*wsman_transport_get_userName = *openwsmanc::wsman_transport_get_userName;
*wsman_transport_set_password = *openwsmanc::wsman_transport_set_password;
*wsman_transport_get_password = *openwsmanc::wsman_transport_get_password;
*wsman_transport_set_proxy_username = *openwsmanc::wsman_transport_set_proxy_username;
*wsman_transport_get_proxy_username = *openwsmanc::wsman_transport_get_proxy_username;
*wsman_transport_set_proxy_password = *openwsmanc::wsman_transport_set_proxy_password;
*wsman_transport_get_proxy_password = *openwsmanc::wsman_transport_get_proxy_password;
*wsman_transport_set_auth_method = *openwsmanc::wsman_transport_set_auth_method;
*wsman_transport_get_auth_method = *openwsmanc::wsman_transport_get_auth_method;
*wsmc_transport_get_auth_name = *openwsmanc::wsmc_transport_get_auth_name;
*wsmc_transport_get_auth_value = *openwsmanc::wsmc_transport_get_auth_value;
*wsman_transport_get_last_error_string = *openwsmanc::wsman_transport_get_last_error_string;
*wsman_transport_set_timeout = *openwsmanc::wsman_transport_set_timeout;
*wsman_transport_get_timeout = *openwsmanc::wsman_transport_get_timeout;
*wsman_transport_set_verify_peer = *openwsmanc::wsman_transport_set_verify_peer;
*wsman_transport_get_verify_peer = *openwsmanc::wsman_transport_get_verify_peer;
*wsman_transport_set_verify_host = *openwsmanc::wsman_transport_set_verify_host;
*wsman_transport_get_verify_host = *openwsmanc::wsman_transport_get_verify_host;
*wsman_transport_set_crlcheck = *openwsmanc::wsman_transport_set_crlcheck;
*wsman_transport_get_crlcheck = *openwsmanc::wsman_transport_get_crlcheck;
*wsman_transport_set_crlfile = *openwsmanc::wsman_transport_set_crlfile;
*wsman_transport_get_crlfile = *openwsmanc::wsman_transport_get_crlfile;
*wsman_transport_set_proxy = *openwsmanc::wsman_transport_set_proxy;
*wsman_transport_get_proxy = *openwsmanc::wsman_transport_get_proxy;
*wsman_transport_set_proxyauth = *openwsmanc::wsman_transport_set_proxyauth;
*wsman_transport_get_proxyauth = *openwsmanc::wsman_transport_get_proxyauth;
*wsman_transport_set_cainfo = *openwsmanc::wsman_transport_set_cainfo;
*wsman_transport_get_cainfo = *openwsmanc::wsman_transport_get_cainfo;
*wsman_transport_set_certhumbprint = *openwsmanc::wsman_transport_set_certhumbprint;
*wsman_transport_get_certhumbprint = *openwsmanc::wsman_transport_get_certhumbprint;
*wsman_transport_set_capath = *openwsmanc::wsman_transport_set_capath;
*wsman_transport_get_capath = *openwsmanc::wsman_transport_get_capath;
*wsman_transport_set_caoid = *openwsmanc::wsman_transport_set_caoid;
*wsman_transport_get_caoid = *openwsmanc::wsman_transport_get_caoid;
*wsman_transport_set_cert = *openwsmanc::wsman_transport_set_cert;
*wsman_transport_get_cert = *openwsmanc::wsman_transport_get_cert;
*wsman_transport_set_key = *openwsmanc::wsman_transport_set_key;
*wsman_transport_get_key = *openwsmanc::wsman_transport_get_key;
*set_debug = *openwsmanc::set_debug;
*get_debug = *openwsmanc::get_debug;
*create_soap_envelope = *openwsmanc::create_soap_envelope;
*create_doc_from_file = *openwsmanc::create_doc_from_file;
*create_doc_from_string = *openwsmanc::create_doc_from_string;
*uri_prefix = *openwsmanc::uri_prefix;

############# Class : openwsman::XmlNs ##############

package openwsman::XmlNs;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::XmlDoc ##############

package openwsman::XmlDoc;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_XmlDoc(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_XmlDoc($self);
        delete $OWNER{$self};
    }
}

*string = *openwsmanc::XmlDoc_string;
*encode = *openwsmanc::XmlDoc_encode;
*dump_file = *openwsmanc::XmlDoc_dump_file;
*root = *openwsmanc::XmlDoc_root;
*envelope = *openwsmanc::XmlDoc_envelope;
*header = *openwsmanc::XmlDoc_header;
*body = *openwsmanc::XmlDoc_body;
*element = *openwsmanc::XmlDoc_element;
*context = *openwsmanc::XmlDoc_context;
*generate_fault = *openwsmanc::XmlDoc_generate_fault;
*is_fault = *openwsmanc::XmlDoc_is_fault;
*fault = *openwsmanc::XmlDoc_fault;
*create_response_envelope = *openwsmanc::XmlDoc_create_response_envelope;
*is_end_of_sequence = *openwsmanc::XmlDoc_is_end_of_sequence;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::XmlNode ##############

package openwsman::XmlNode;
use overload
    "==" => sub { $_[0]->__eq__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_XmlNode($self);
        delete $OWNER{$self};
    }
}

*string = *openwsmanc::XmlNode_string;
*dump_file = *openwsmanc::XmlNode_dump_file;
*__eq__ = *openwsmanc::XmlNode___eq__;
*text = *openwsmanc::XmlNode_text;
*set_text = *openwsmanc::XmlNode_set_text;
*doc = *openwsmanc::XmlNode_doc;
*parent = *openwsmanc::XmlNode_parent;
*child = *openwsmanc::XmlNode_child;
*name = *openwsmanc::XmlNode_name;
*set_name = *openwsmanc::XmlNode_set_name;
*ns = *openwsmanc::XmlNode_ns;
*set_ns = *openwsmanc::XmlNode_set_ns;
*prefix = *openwsmanc::XmlNode_prefix;
*set_lang = *openwsmanc::XmlNode_set_lang;
*find = *openwsmanc::XmlNode_find;
*next = *openwsmanc::XmlNode_next;
*size = *openwsmanc::XmlNode_size;
*add_before = *openwsmanc::XmlNode_add_before;
*add = *openwsmanc::XmlNode_add;
*get = *openwsmanc::XmlNode_get;
*attr = *openwsmanc::XmlNode_attr;
*attr_count = *openwsmanc::XmlNode_attr_count;
*attr_find = *openwsmanc::XmlNode_attr_find;
*attr_add = *openwsmanc::XmlNode_attr_add;
*epr = *openwsmanc::XmlNode_epr;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::XmlAttr ##############

package openwsman::XmlAttr;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
*name = *openwsmanc::XmlAttr_name;
*ns = *openwsmanc::XmlAttr_ns;
*value = *openwsmanc::XmlAttr_value;
*remove = *openwsmanc::XmlAttr_remove;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::EndPointReference ##############

package openwsman::EndPointReference;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_EndPointReference(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_EndPointReference($self);
        delete $OWNER{$self};
    }
}

*add_selector = *openwsmanc::EndPointReference_add_selector;
*serialize = *openwsmanc::EndPointReference_serialize;
*cmp = *openwsmanc::EndPointReference_cmp;
*to_xml = *openwsmanc::EndPointReference_to_xml;
*string = *openwsmanc::EndPointReference_string;
*selector_count = *openwsmanc::EndPointReference_selector_count;
*resource_uri = *openwsmanc::EndPointReference_resource_uri;
*selector = *openwsmanc::EndPointReference_selector;
*selector_names = *openwsmanc::EndPointReference_selector_names;
*classname = *openwsmanc::EndPointReference_classname;
*namespace = *openwsmanc::EndPointReference_namespace;
*prefix = *openwsmanc::EndPointReference_prefix;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Filter ##############

package openwsman::Filter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
*swig_resultClass_get = *openwsmanc::Filter_resultClass_get;
*swig_resultClass_set = *openwsmanc::Filter_resultClass_set;
*swig_assocClass_get = *openwsmanc::Filter_assocClass_get;
*swig_assocClass_set = *openwsmanc::Filter_assocClass_set;
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_Filter(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_Filter($self);
        delete $OWNER{$self};
    }
}

*associators = *openwsmanc::Filter_associators;
*references = *openwsmanc::Filter_references;
*simple = *openwsmanc::Filter_simple;
*xpath = *openwsmanc::Filter_xpath;
*cql = *openwsmanc::Filter_cql;
*wql = *openwsmanc::Filter_wql;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::EnumerateInfo ##############

package openwsman::EnumerateInfo;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_EnumerateInfo($self);
        delete $OWNER{$self};
    }
}

*max_items = *openwsmanc::EnumerateInfo_max_items;
*set_max_items = *openwsmanc::EnumerateInfo_set_max_items;
*flags = *openwsmanc::EnumerateInfo_flags;
*epr_to = *openwsmanc::EnumerateInfo_epr_to;
*epr_uri = *openwsmanc::EnumerateInfo_epr_uri;
*encoding = *openwsmanc::EnumerateInfo_encoding;
*filter = *openwsmanc::EnumerateInfo_filter;
*index = *openwsmanc::EnumerateInfo_index;
*set_index = *openwsmanc::EnumerateInfo_set_index;
*total_items = *openwsmanc::EnumerateInfo_total_items;
*set_total_items = *openwsmanc::EnumerateInfo_set_total_items;
*pull_result = *openwsmanc::EnumerateInfo_pull_result;
*set_pull_result = *openwsmanc::EnumerateInfo_set_pull_result;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::SoapOp ##############

package openwsman::SoapOp;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
*indoc = *openwsmanc::SoapOp_indoc;
*set_indoc = *openwsmanc::SoapOp_set_indoc;
*outdoc = *openwsmanc::SoapOp_outdoc;
*set_outdoc = *openwsmanc::SoapOp_set_outdoc;
*soap = *openwsmanc::SoapOp_soap;
*msg = *openwsmanc::SoapOp_msg;
*maxsize = *openwsmanc::SoapOp_maxsize;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Soap ##############

package openwsman::Soap;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_Soap($self);
        delete $OWNER{$self};
    }
}

*create_context = *openwsmanc::Soap_create_context;
*context = *openwsmanc::Soap_context;
*create_ep_context = *openwsmanc::Soap_create_ep_context;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Context ##############

package openwsman::Context;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_Context($self);
        delete $OWNER{$self};
    }
}

*indoc = *openwsmanc::Context_indoc;
*runtime = *openwsmanc::Context_runtime;
*set_enumIdleTimeout = *openwsmanc::Context_set_enumIdleTimeout;
*classname = *openwsmanc::Context_classname;
*method = *openwsmanc::Context_method;
*method_args = *openwsmanc::Context_method_args;
*max_elements = *openwsmanc::Context_max_elements;
*max_envelope_size = *openwsmanc::Context_max_envelope_size;
*fragment_string = *openwsmanc::Context_fragment_string;
*selector = *openwsmanc::Context_selector;
*selectors_from_epr = *openwsmanc::Context_selectors_from_epr;
*selectors = *openwsmanc::Context_selectors;
*selectors_from_filter = *openwsmanc::Context_selectors_from_filter;
*action = *openwsmanc::Context_action;
*resource_uri = *openwsmanc::Context_resource_uri;
*option_set = *openwsmanc::Context_option_set;
*parse_enum_request = *openwsmanc::Context_parse_enum_request;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Status ##############

package openwsman::Status;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_Status(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_Status($self);
        delete $OWNER{$self};
    }
}

*to_s = *openwsmanc::Status_to_s;
*set_code = *openwsmanc::Status_set_code;
*code = *openwsmanc::Status_code;
*set_detail = *openwsmanc::Status_set_detail;
*detail = *openwsmanc::Status_detail;
*set_msg = *openwsmanc::Status_set_msg;
*msg = *openwsmanc::Status_msg;
*generate_fault = *openwsmanc::Status_generate_fault;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Fault ##############

package openwsman::Fault;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_Fault(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_Fault($self);
        delete $OWNER{$self};
    }
}

*code = *openwsmanc::Fault_code;
*subcode = *openwsmanc::Fault_subcode;
*reason = *openwsmanc::Fault_reason;
*detail = *openwsmanc::Fault_detail;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Transport ##############

package openwsman::Transport;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
*is_auth_method = *openwsmanc::Transport_is_auth_method;
*close = *openwsmanc::Transport_close;
*set_agent = *openwsmanc::Transport_set_agent;
*agent = *openwsmanc::Transport_agent;
*get_username = *openwsmanc::Transport_get_username;
*set_username = *openwsmanc::Transport_set_username;
*get_password = *openwsmanc::Transport_get_password;
*set_password = *openwsmanc::Transport_set_password;
*get_proxy_username = *openwsmanc::Transport_get_proxy_username;
*set_proxy_username = *openwsmanc::Transport_set_proxy_username;
*get_proxy_password = *openwsmanc::Transport_get_proxy_password;
*set_proxy_password = *openwsmanc::Transport_set_proxy_password;
*set_auth_method = *openwsmanc::Transport_set_auth_method;
*auth_method = *openwsmanc::Transport_auth_method;
*auth_name = *openwsmanc::Transport_auth_name;
*auth_value = *openwsmanc::Transport_auth_value;
*error_string = *openwsmanc::Transport_error_string;
*set_timeout = *openwsmanc::Transport_set_timeout;
*timeout = *openwsmanc::Transport_timeout;
*set_verify_peer = *openwsmanc::Transport_set_verify_peer;
*verify_peer = *openwsmanc::Transport_verify_peer;
*set_verify_host = *openwsmanc::Transport_set_verify_host;
*verify_host = *openwsmanc::Transport_verify_host;
*set_proxy = *openwsmanc::Transport_set_proxy;
*proxy = *openwsmanc::Transport_proxy;
*set_proxyauth = *openwsmanc::Transport_set_proxyauth;
*proxyauth = *openwsmanc::Transport_proxyauth;
*set_cainfo = *openwsmanc::Transport_set_cainfo;
*cainfo = *openwsmanc::Transport_cainfo;
*set_certhumbprint = *openwsmanc::Transport_set_certhumbprint;
*certhumbprint = *openwsmanc::Transport_certhumbprint;
*set_capath = *openwsmanc::Transport_set_capath;
*capath = *openwsmanc::Transport_capath;
*set_caoid = *openwsmanc::Transport_set_caoid;
*caoid = *openwsmanc::Transport_caoid;
*set_cert = *openwsmanc::Transport_set_cert;
*cert = *openwsmanc::Transport_cert;
*set_key = *openwsmanc::Transport_set_key;
*key = *openwsmanc::Transport_key;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::ClientOptions ##############

package openwsman::ClientOptions;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_ClientOptions(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_ClientOptions($self);
        delete $OWNER{$self};
    }
}

*set_dump_request = *openwsmanc::ClientOptions_set_dump_request;
*clear_dump_request = *openwsmanc::ClientOptions_clear_dump_request;
*set_flags = *openwsmanc::ClientOptions_set_flags;
*get_flags = *openwsmanc::ClientOptions_get_flags;
*clear_flags = *openwsmanc::ClientOptions_clear_flags;
*reset_flags = *openwsmanc::ClientOptions_reset_flags;
*set_max_envelope_size = *openwsmanc::ClientOptions_set_max_envelope_size;
*get_max_envelope_size = *openwsmanc::ClientOptions_get_max_envelope_size;
*set_max_elements = *openwsmanc::ClientOptions_set_max_elements;
*get_max_elements = *openwsmanc::ClientOptions_get_max_elements;
*set_timeout = *openwsmanc::ClientOptions_set_timeout;
*get_timeout = *openwsmanc::ClientOptions_get_timeout;
*set_fragment = *openwsmanc::ClientOptions_set_fragment;
*get_fragment = *openwsmanc::ClientOptions_get_fragment;
*set_cim_namespace = *openwsmanc::ClientOptions_set_cim_namespace;
*get_cim_namespace = *openwsmanc::ClientOptions_get_cim_namespace;
*set_reference = *openwsmanc::ClientOptions_set_reference;
*get_reference = *openwsmanc::ClientOptions_get_reference;
*add_option = *openwsmanc::ClientOptions_add_option;
*add_selector = *openwsmanc::ClientOptions_add_selector;
*add_property = *openwsmanc::ClientOptions_add_property;
*set_delivery_uri = *openwsmanc::ClientOptions_set_delivery_uri;
*delivery_uri = *openwsmanc::ClientOptions_delivery_uri;
*set_sub_expiry = *openwsmanc::ClientOptions_set_sub_expiry;
*sub_expiry = *openwsmanc::ClientOptions_sub_expiry;
*set_heartbeat_interval = *openwsmanc::ClientOptions_set_heartbeat_interval;
*heartbeat_interval = *openwsmanc::ClientOptions_heartbeat_interval;
*set_delivery_mode = *openwsmanc::ClientOptions_set_delivery_mode;
*delivery_mode = *openwsmanc::ClientOptions_delivery_mode;
*set_delivery_security_mode = *openwsmanc::ClientOptions_set_delivery_security_mode;
*delivery_sec_mode = *openwsmanc::ClientOptions_delivery_sec_mode;
*set_locale = *openwsmanc::ClientOptions_set_locale;
*locale = *openwsmanc::ClientOptions_locale;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openwsman::Client ##############

package openwsman::Client;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( openwsman );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openwsmanc::new_Client(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openwsmanc::delete_Client($self);
        delete $OWNER{$self};
    }
}

*set_dumpfile = *openwsmanc::Client_set_dumpfile;
*response_code = *openwsmanc::Client_response_code;
*scheme = *openwsmanc::Client_scheme;
*host = *openwsmanc::Client_host;
*port = *openwsmanc::Client_port;
*path = *openwsmanc::Client_path;
*user = *openwsmanc::Client_user;
*password = *openwsmanc::Client_password;
*transport = *openwsmanc::Client_transport;
*send_request = *openwsmanc::Client_send_request;
*build_envelope_from_response = *openwsmanc::Client_build_envelope_from_response;
*encoding = *openwsmanc::Client_encoding;
*set_encoding = *openwsmanc::Client_set_encoding;
*identify = *openwsmanc::Client_identify;
*get_from_epr = *openwsmanc::Client_get_from_epr;
*delete_from_epr = *openwsmanc::Client_delete_from_epr;
*enumerate = *openwsmanc::Client_enumerate;
*pull = *openwsmanc::Client_pull;
*create = *openwsmanc::Client_create;
*put = *openwsmanc::Client_put;
*release = *openwsmanc::Client_release;
*get = *openwsmanc::Client_get;
*delete = *openwsmanc::Client_delete;
*invoke = *openwsmanc::Client_invoke;
*subscribe = *openwsmanc::Client_subscribe;
*unsubscribe = *openwsmanc::Client_unsubscribe;
*renew = *openwsmanc::Client_renew;
*fault_string = *openwsmanc::Client_fault_string;
*last_error = *openwsmanc::Client_last_error;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package openwsman;

*OPENWSMAN_MAJOR = *openwsmanc::OPENWSMAN_MAJOR;
*OPENWSMAN_MINOR = *openwsmanc::OPENWSMAN_MINOR;
*OPENWSMAN_PATCH = *openwsmanc::OPENWSMAN_PATCH;
*OPENWSMAN_VERSION = *openwsmanc::OPENWSMAN_VERSION;
*XML_NS_SOAP_1_1 = *openwsmanc::XML_NS_SOAP_1_1;
*XML_NS_SOAP_1_2 = *openwsmanc::XML_NS_SOAP_1_2;
*XML_NS_XML_NAMESPACES = *openwsmanc::XML_NS_XML_NAMESPACES;
*XML_NS_ADDRESSING = *openwsmanc::XML_NS_ADDRESSING;
*XML_NS_DISCOVERY = *openwsmanc::XML_NS_DISCOVERY;
*XML_NS_EVENTING = *openwsmanc::XML_NS_EVENTING;
*XML_NS_ENUMERATION = *openwsmanc::XML_NS_ENUMERATION;
*XML_NS_TRANSFER = *openwsmanc::XML_NS_TRANSFER;
*XML_NS_XML_SCHEMA = *openwsmanc::XML_NS_XML_SCHEMA;
*XML_NS_SCHEMA_INSTANCE = *openwsmanc::XML_NS_SCHEMA_INSTANCE;
*XML_NS_POLICY = *openwsmanc::XML_NS_POLICY;
*XML_NS_TRUST = *openwsmanc::XML_NS_TRUST;
*XML_NS_SE = *openwsmanc::XML_NS_SE;
*XML_NS_SCHEMA_INSTANCE_PREFIX = *openwsmanc::XML_NS_SCHEMA_INSTANCE_PREFIX;
*XML_NS_SCHEMA_INSTANCE_NIL = *openwsmanc::XML_NS_SCHEMA_INSTANCE_NIL;
*XML_NS_OPENWSMAN = *openwsmanc::XML_NS_OPENWSMAN;
*XML_NS_CIM_SCHEMA = *openwsmanc::XML_NS_CIM_SCHEMA;
*XML_NS_CIM_CLASS = *openwsmanc::XML_NS_CIM_CLASS;
*XML_NS_CIM_BINDING = *openwsmanc::XML_NS_CIM_BINDING;
*XML_NS_CIM_INTRINSIC = *openwsmanc::XML_NS_CIM_INTRINSIC;
*XML_NS_WS_MAN = *openwsmanc::XML_NS_WS_MAN;
*XML_NS_WSMAN_FAULT_DETAIL = *openwsmanc::XML_NS_WSMAN_FAULT_DETAIL;
*XML_NS_WS_MAN_CAT = *openwsmanc::XML_NS_WS_MAN_CAT;
*XML_NS_WSMAN_ID = *openwsmanc::XML_NS_WSMAN_ID;
*SOAP1_2_CONTENT_TYPE = *openwsmanc::SOAP1_2_CONTENT_TYPE;
*SOAP_CONTENT_TYPE = *openwsmanc::SOAP_CONTENT_TYPE;
*CIMXML_CONTENT_TYPE = *openwsmanc::CIMXML_CONTENT_TYPE;
*SOAP_SKIP_DEF_FILTERS = *openwsmanc::SOAP_SKIP_DEF_FILTERS;
*SOAP_ACTION_PREFIX = *openwsmanc::SOAP_ACTION_PREFIX;
*SOAP_ONE_WAY_OP = *openwsmanc::SOAP_ONE_WAY_OP;
*SOAP_NO_RESP_OP = *openwsmanc::SOAP_NO_RESP_OP;
*SOAP_DONT_KEEP_INDOC = *openwsmanc::SOAP_DONT_KEEP_INDOC;
*SOAP_CLIENT_RESPONSE = *openwsmanc::SOAP_CLIENT_RESPONSE;
*SOAP_CUSTOM_DISPATCHER = *openwsmanc::SOAP_CUSTOM_DISPATCHER;
*SOAP_IDENTIFY_DISPATCH = *openwsmanc::SOAP_IDENTIFY_DISPATCH;
*WSMID_IDENTIFY = *openwsmanc::WSMID_IDENTIFY;
*WSMID_IDENTIFY_RESPONSE = *openwsmanc::WSMID_IDENTIFY_RESPONSE;
*WSMID_PROTOCOL_VERSION = *openwsmanc::WSMID_PROTOCOL_VERSION;
*WSMID_PRODUCT_VENDOR = *openwsmanc::WSMID_PRODUCT_VENDOR;
*WSMID_PRODUCT_VERSION = *openwsmanc::WSMID_PRODUCT_VERSION;
*XML_SCHEMA_NIL = *openwsmanc::XML_SCHEMA_NIL;
*WSA_TO_ANONYMOUS = *openwsmanc::WSA_TO_ANONYMOUS;
*WSA_MESSAGE_ID = *openwsmanc::WSA_MESSAGE_ID;
*WSA_ADDRESS = *openwsmanc::WSA_ADDRESS;
*WSA_EPR = *openwsmanc::WSA_EPR;
*WSA_ACTION = *openwsmanc::WSA_ACTION;
*WSA_RELATES_TO = *openwsmanc::WSA_RELATES_TO;
*WSA_TO = *openwsmanc::WSA_TO;
*WSA_REPLY_TO = *openwsmanc::WSA_REPLY_TO;
*WSA_FROM = *openwsmanc::WSA_FROM;
*WSA_FAULT_TO = *openwsmanc::WSA_FAULT_TO;
*WSA_REFERENCE_PROPERTIES = *openwsmanc::WSA_REFERENCE_PROPERTIES;
*WSA_REFERENCE_PARAMETERS = *openwsmanc::WSA_REFERENCE_PARAMETERS;
*WSA_ACTION_FAULT = *openwsmanc::WSA_ACTION_FAULT;
*SOAP_ENVELOPE = *openwsmanc::SOAP_ENVELOPE;
*SOAP_HEADER = *openwsmanc::SOAP_HEADER;
*SOAP_BODY = *openwsmanc::SOAP_BODY;
*SOAP_FAULT = *openwsmanc::SOAP_FAULT;
*SOAP_CODE = *openwsmanc::SOAP_CODE;
*SOAP_VALUE = *openwsmanc::SOAP_VALUE;
*SOAP_SUBCODE = *openwsmanc::SOAP_SUBCODE;
*SOAP_REASON = *openwsmanc::SOAP_REASON;
*SOAP_TEXT = *openwsmanc::SOAP_TEXT;
*SOAP_LANG = *openwsmanc::SOAP_LANG;
*SOAP_DETAIL = *openwsmanc::SOAP_DETAIL;
*SOAP_FAULT_DETAIL = *openwsmanc::SOAP_FAULT_DETAIL;
*SOAP_MUST_UNDERSTAND = *openwsmanc::SOAP_MUST_UNDERSTAND;
*SOAP_VERSION_MISMATCH = *openwsmanc::SOAP_VERSION_MISMATCH;
*SOAP_UPGRADE = *openwsmanc::SOAP_UPGRADE;
*SOAP_SUPPORTED_ENVELOPE = *openwsmanc::SOAP_SUPPORTED_ENVELOPE;
*TRANSFER_ACTION_GET = *openwsmanc::TRANSFER_ACTION_GET;
*TRANSFER_ACTION_GETRESPONSE = *openwsmanc::TRANSFER_ACTION_GETRESPONSE;
*TRANSFER_GET = *openwsmanc::TRANSFER_GET;
*TRANSFER_GET_RESP = *openwsmanc::TRANSFER_GET_RESP;
*TRANSFER_ACTION_PUT = *openwsmanc::TRANSFER_ACTION_PUT;
*TRANSFER_ACTION_PUTRESPONSE = *openwsmanc::TRANSFER_ACTION_PUTRESPONSE;
*TRANSFER_PUT = *openwsmanc::TRANSFER_PUT;
*TRANSFER_PUT_RESP = *openwsmanc::TRANSFER_PUT_RESP;
*TRANSFER_ACTION_CREATE = *openwsmanc::TRANSFER_ACTION_CREATE;
*TRANSFER_CREATE = *openwsmanc::TRANSFER_CREATE;
*TRANSFER_ACTION_DELETE = *openwsmanc::TRANSFER_ACTION_DELETE;
*TRANSFER_DELETE = *openwsmanc::TRANSFER_DELETE;
*TRANSFER_ACTION_DELETERESPONSE = *openwsmanc::TRANSFER_ACTION_DELETERESPONSE;
*TRANSFER_DELETE_RESP = *openwsmanc::TRANSFER_DELETE_RESP;
*WSXF_ACTION_FAULT = *openwsmanc::WSXF_ACTION_FAULT;
*ENUM_ACTION_ENUMERATE = *openwsmanc::ENUM_ACTION_ENUMERATE;
*ENUM_ACTION_ENUMERATERESPONSE = *openwsmanc::ENUM_ACTION_ENUMERATERESPONSE;
*WSENUM_ENUMERATE = *openwsmanc::WSENUM_ENUMERATE;
*WSENUM_ENUMERATE_RESP = *openwsmanc::WSENUM_ENUMERATE_RESP;
*ENUM_ACTION_RELEASE = *openwsmanc::ENUM_ACTION_RELEASE;
*WSENUM_RELEASE = *openwsmanc::WSENUM_RELEASE;
*WSENUM_RELEASE_RESP = *openwsmanc::WSENUM_RELEASE_RESP;
*ENUM_ACTION_PULL = *openwsmanc::ENUM_ACTION_PULL;
*WSENUM_PULL = *openwsmanc::WSENUM_PULL;
*WSENUM_PULL_RESP = *openwsmanc::WSENUM_PULL_RESP;
*ENUM_ACTION_RENEW = *openwsmanc::ENUM_ACTION_RENEW;
*ENUM_ACTION_GETSTATUS = *openwsmanc::ENUM_ACTION_GETSTATUS;
*ENUM_ACTION_ENUMEND = *openwsmanc::ENUM_ACTION_ENUMEND;
*EVT_ACTION_SUBSCRIBE = *openwsmanc::EVT_ACTION_SUBSCRIBE;
*WSEVENT_SUBSCRIBE = *openwsmanc::WSEVENT_SUBSCRIBE;
*WSEVENT_SUBSCRIBE_RESP = *openwsmanc::WSEVENT_SUBSCRIBE_RESP;
*EVT_ACTION_PULL = *openwsmanc::EVT_ACTION_PULL;
*EVT_ACTION_GETSTATUS = *openwsmanc::EVT_ACTION_GETSTATUS;
*EVT_ACTION_UNSUBSCRIBE = *openwsmanc::EVT_ACTION_UNSUBSCRIBE;
*WSEVENT_UNSUBSCRIBE = *openwsmanc::WSEVENT_UNSUBSCRIBE;
*WSEVENT_UNSUBSCRIBE_RESP = *openwsmanc::WSEVENT_UNSUBSCRIBE_RESP;
*EVT_ACTION_SUBEND = *openwsmanc::EVT_ACTION_SUBEND;
*EVT_ACTION_RENEW = *openwsmanc::EVT_ACTION_RENEW;
*WSEVENT_RENEW = *openwsmanc::WSEVENT_RENEW;
*WSEVENT_RENEW_RESP = *openwsmanc::WSEVENT_RENEW_RESP;
*WSMAN_ACTION_EVENTS = *openwsmanc::WSMAN_ACTION_EVENTS;
*WSMAN_ACTION_HEARTBEAT = *openwsmanc::WSMAN_ACTION_HEARTBEAT;
*WSMAN_ACTION_DROPPEDEVENTS = *openwsmanc::WSMAN_ACTION_DROPPEDEVENTS;
*WSMAN_ACTION_ACK = *openwsmanc::WSMAN_ACTION_ACK;
*WSMAN_ACTION_EVENT = *openwsmanc::WSMAN_ACTION_EVENT;
*WSENUM_ACTION_FAULT = *openwsmanc::WSENUM_ACTION_FAULT;
*WSENUM_RENEW = *openwsmanc::WSENUM_RENEW;
*WSENUM_RENEW_RESP = *openwsmanc::WSENUM_RENEW_RESP;
*WSENUM_GET_STATUS = *openwsmanc::WSENUM_GET_STATUS;
*WSENUM_GET_STATUS_RESP = *openwsmanc::WSENUM_GET_STATUS_RESP;
*WSMAN_ACTION_FAULT = *openwsmanc::WSMAN_ACTION_FAULT;
*WSENUM_END_TO = *openwsmanc::WSENUM_END_TO;
*WSENUM_EXPIRES = *openwsmanc::WSENUM_EXPIRES;
*WSENUM_FILTER = *openwsmanc::WSENUM_FILTER;
*WSENUM_DIALECT = *openwsmanc::WSENUM_DIALECT;
*WSENUM_ENUMERATION_CONTEXT = *openwsmanc::WSENUM_ENUMERATION_CONTEXT;
*WSENUM_MAX_TIME = *openwsmanc::WSENUM_MAX_TIME;
*WSENUM_MAX_ELEMENTS = *openwsmanc::WSENUM_MAX_ELEMENTS;
*WSENUM_MAX_CHARACTERS = *openwsmanc::WSENUM_MAX_CHARACTERS;
*WSENUM_ITEMS = *openwsmanc::WSENUM_ITEMS;
*WSENUM_END_OF_SEQUENCE = *openwsmanc::WSENUM_END_OF_SEQUENCE;
*WSENUM_ENUMERATION_END = *openwsmanc::WSENUM_ENUMERATION_END;
*WSENUM_REASON = *openwsmanc::WSENUM_REASON;
*WSENUM_CODE = *openwsmanc::WSENUM_CODE;
*WSENUM_SOURCE_SHUTTING_DOWN = *openwsmanc::WSENUM_SOURCE_SHUTTING_DOWN;
*WSENUM_SOURCE_CANCELING = *openwsmanc::WSENUM_SOURCE_CANCELING;
*WSEVENT_DELIVERY = *openwsmanc::WSEVENT_DELIVERY;
*WSEVENT_NOTIFY_TO = *openwsmanc::WSEVENT_NOTIFY_TO;
*WSEVENT_ENDTO = *openwsmanc::WSEVENT_ENDTO;
*WSEVENT_EXPIRES = *openwsmanc::WSEVENT_EXPIRES;
*WSEVENT_DELIVERY_MODE = *openwsmanc::WSEVENT_DELIVERY_MODE;
*WSEVENT_SUBSCRIPTION_MANAGER = *openwsmanc::WSEVENT_SUBSCRIPTION_MANAGER;
*WSEVENT_IDENTIFIER = *openwsmanc::WSEVENT_IDENTIFIER;
*WSEVENT_FILTER = *openwsmanc::WSEVENT_FILTER;
*WSEVENT_DIALECT = *openwsmanc::WSEVENT_DIALECT;
*WSEVENT_ACTION_FAULT = *openwsmanc::WSEVENT_ACTION_FAULT;
*WSEVENT_DELIVERY_MODE_PUSH = *openwsmanc::WSEVENT_DELIVERY_MODE_PUSH;
*WSEVENT_DELIVERY_MODE_PUSHWITHACK = *openwsmanc::WSEVENT_DELIVERY_MODE_PUSHWITHACK;
*WSEVENT_DELIVERY_MODE_EVENTS = *openwsmanc::WSEVENT_DELIVERY_MODE_EVENTS;
*WSEVENT_DELIVERY_MODE_PULL = *openwsmanc::WSEVENT_DELIVERY_MODE_PULL;
*WSMB_ASSOCIATED_INSTANCES = *openwsmanc::WSMB_ASSOCIATED_INSTANCES;
*WSMB_ASSOCIATION_INSTANCES = *openwsmanc::WSMB_ASSOCIATION_INSTANCES;
*WSMB_OBJECT = *openwsmanc::WSMB_OBJECT;
*WSMB_ASSOCIATION_CLASS_NAME = *openwsmanc::WSMB_ASSOCIATION_CLASS_NAME;
*WSMB_RESULT_CLASS_NAME = *openwsmanc::WSMB_RESULT_CLASS_NAME;
*WSMB_ROLE = *openwsmanc::WSMB_ROLE;
*WSMB_RESULT_ROLE = *openwsmanc::WSMB_RESULT_ROLE;
*WSMB_INCLUDE_RESULT_PROPERTY = *openwsmanc::WSMB_INCLUDE_RESULT_PROPERTY;
*CIM_RESOURCE_NS_PREFIX = *openwsmanc::CIM_RESOURCE_NS_PREFIX;
*WSM_SYSTEM = *openwsmanc::WSM_SYSTEM;
*WSM_LOCALE = *openwsmanc::WSM_LOCALE;
*WSM_RESOURCE_URI = *openwsmanc::WSM_RESOURCE_URI;
*WSM_SELECTOR_SET = *openwsmanc::WSM_SELECTOR_SET;
*WSM_SELECTOR = *openwsmanc::WSM_SELECTOR;
*WSM_NAME = *openwsmanc::WSM_NAME;
*WSM_REQUEST_TOTAL = *openwsmanc::WSM_REQUEST_TOTAL;
*WSM_TOTAL_ESTIMATE = *openwsmanc::WSM_TOTAL_ESTIMATE;
*WSM_OPTIMIZE_ENUM = *openwsmanc::WSM_OPTIMIZE_ENUM;
*WSM_MAX_ELEMENTS = *openwsmanc::WSM_MAX_ELEMENTS;
*WSM_ENUM_EPR = *openwsmanc::WSM_ENUM_EPR;
*WSM_ENUM_OBJ_AND_EPR = *openwsmanc::WSM_ENUM_OBJ_AND_EPR;
*WSM_ENUM_MODE = *openwsmanc::WSM_ENUM_MODE;
*WSM_ITEM = *openwsmanc::WSM_ITEM;
*WSM_FRAGMENT_TRANSFER = *openwsmanc::WSM_FRAGMENT_TRANSFER;
*WSM_XML_FRAGMENT = *openwsmanc::WSM_XML_FRAGMENT;
*WSM_OPTION_SET = *openwsmanc::WSM_OPTION_SET;
*WSM_OPTION = *openwsmanc::WSM_OPTION;
*WSM_TOTAL = *openwsmanc::WSM_TOTAL;
*WSM_HEARTBEATS = *openwsmanc::WSM_HEARTBEATS;
*WSM_EVENTS = *openwsmanc::WSM_EVENTS;
*WSM_ACTION = *openwsmanc::WSM_ACTION;
*WSM_EVENT = *openwsmanc::WSM_EVENT;
*WSM_ACKREQUESTED = *openwsmanc::WSM_ACKREQUESTED;
*WSM_MAX_ENVELOPE_SIZE = *openwsmanc::WSM_MAX_ENVELOPE_SIZE;
*WSM_OPERATION_TIMEOUT = *openwsmanc::WSM_OPERATION_TIMEOUT;
*WSM_FAULT_SUBCODE = *openwsmanc::WSM_FAULT_SUBCODE;
*WSM_FILTER = *openwsmanc::WSM_FILTER;
*WSM_DIALECT = *openwsmanc::WSM_DIALECT;
*WSM_CONTENTCODING = *openwsmanc::WSM_CONTENTCODING;
*WSM_CONNECTIONRETRY = *openwsmanc::WSM_CONNECTIONRETRY;
*WSM_SENDBOOKMARKS = *openwsmanc::WSM_SENDBOOKMARKS;
*WSM_BOOKMARK = *openwsmanc::WSM_BOOKMARK;
*WSM_DROPPEDEVENTS = *openwsmanc::WSM_DROPPEDEVENTS;
*WSM_AUTH = *openwsmanc::WSM_AUTH;
*WSM_PROFILE = *openwsmanc::WSM_PROFILE;
*WSM_CERTIFICATETHUMBPRINT = *openwsmanc::WSM_CERTIFICATETHUMBPRINT;
*WSM_DEFAULTBOOKMARK = *openwsmanc::WSM_DEFAULTBOOKMARK;
*WXF_RESOURCE_CREATED = *openwsmanc::WXF_RESOURCE_CREATED;
*WSMB_POLYMORPHISM_MODE = *openwsmanc::WSMB_POLYMORPHISM_MODE;
*WSMB_INCLUDE_SUBCLASS_PROP = *openwsmanc::WSMB_INCLUDE_SUBCLASS_PROP;
*WSMB_EXCLUDE_SUBCLASS_PROP = *openwsmanc::WSMB_EXCLUDE_SUBCLASS_PROP;
*WSMB_NONE = *openwsmanc::WSMB_NONE;
*WSMB_DERIVED_REPRESENTATION = *openwsmanc::WSMB_DERIVED_REPRESENTATION;
*WSMB_ACTION_FAULT = *openwsmanc::WSMB_ACTION_FAULT;
*WSMB_SHOW_EXTENSION = *openwsmanc::WSMB_SHOW_EXTENSION;
*WSMB_EXCLUDE_NIL_PROPS = *openwsmanc::WSMB_EXCLUDE_NIL_PROPS;
*WSMANCAT_RESOURCE = *openwsmanc::WSMANCAT_RESOURCE;
*WSMANCAT_RESOURCE_URI = *openwsmanc::WSMANCAT_RESOURCE_URI;
*WSMANCAT_VERSION = *openwsmanc::WSMANCAT_VERSION;
*WSMANCAT_NOTES = *openwsmanc::WSMANCAT_NOTES;
*WSMANCAT_VENDOR = *openwsmanc::WSMANCAT_VENDOR;
*WSMANCAT_DISPLAY_NAME = *openwsmanc::WSMANCAT_DISPLAY_NAME;
*WSMANCAT_KEYWORDS = *openwsmanc::WSMANCAT_KEYWORDS;
*WSMANCAT_ACCESS = *openwsmanc::WSMANCAT_ACCESS;
*WSMANCAT_RELATIONSHIPS = *openwsmanc::WSMANCAT_RELATIONSHIPS;
*WSMANCAT_COMPLIANCE = *openwsmanc::WSMANCAT_COMPLIANCE;
*WSMANCAT_OPERATION = *openwsmanc::WSMANCAT_OPERATION;
*WSMANCAT_SELECTOR_SET = *openwsmanc::WSMANCAT_SELECTOR_SET;
*WSMANCAT_SELECTOR = *openwsmanc::WSMANCAT_SELECTOR;
*WSMANCAT_OPTION_SET = *openwsmanc::WSMANCAT_OPTION_SET;
*WSMANCAT_ACTION = *openwsmanc::WSMANCAT_ACTION;
*WSMANCAT_SELECTOR_SET_REF = *openwsmanc::WSMANCAT_SELECTOR_SET_REF;
*WSMANCAT_LOCATION = *openwsmanc::WSMANCAT_LOCATION;
*WSMANCAT_NAME = *openwsmanc::WSMANCAT_NAME;
*WSMANCAT_TYPE = *openwsmanc::WSMANCAT_TYPE;
*WSM_SELECTOR_FILTER_DIALECT = *openwsmanc::WSM_SELECTOR_FILTER_DIALECT;
*WSM_WQL_FILTER_DIALECT = *openwsmanc::WSM_WQL_FILTER_DIALECT;
*WSM_XPATH_FILTER_DIALECT = *openwsmanc::WSM_XPATH_FILTER_DIALECT;
*WSM_CQL_FILTER_DIALECT = *openwsmanc::WSM_CQL_FILTER_DIALECT;
*WSM_ASSOCIATION_FILTER_DIALECT = *openwsmanc::WSM_ASSOCIATION_FILTER_DIALECT;
*WSM_XPATH_EVENTROOT_FILTER = *openwsmanc::WSM_XPATH_EVENTROOT_FILTER;
*WSFW_RESPONSE_STR = *openwsmanc::WSFW_RESPONSE_STR;
*WSFW_INDOC = *openwsmanc::WSFW_INDOC;
*WSFW_ENUM_PREFIX = *openwsmanc::WSFW_ENUM_PREFIX;
*CIM_NAMESPACE_SELECTOR = *openwsmanc::CIM_NAMESPACE_SELECTOR;
*CIM_ALL_AVAILABLE_CLASSES = *openwsmanc::CIM_ALL_AVAILABLE_CLASSES;
*XML_NS_CIM_ALL_CLASS = *openwsmanc::XML_NS_CIM_ALL_CLASS;
*CIM_ACTION_ENUMERATE_CLASS_NAMES = *openwsmanc::CIM_ACTION_ENUMERATE_CLASS_NAMES;
*CIM_ACTION_ENUMERATE_INSTANCE_NAMES = *openwsmanc::CIM_ACTION_ENUMERATE_INSTANCE_NAMES;
*CIM_ACTION_ENUMERATE_CLASSES = *openwsmanc::CIM_ACTION_ENUMERATE_CLASSES;
*CIM_ACTION_GET_CLASS = *openwsmanc::CIM_ACTION_GET_CLASS;
*CIM_ACTION_DELETE_CLASS = *openwsmanc::CIM_ACTION_DELETE_CLASS;
*WST_ISSUEDTOKENS = *openwsmanc::WST_ISSUEDTOKENS;
*WST_REQUESTSECURITYTOKENRESPONSE = *openwsmanc::WST_REQUESTSECURITYTOKENRESPONSE;
*WST_TOKENTYPE = *openwsmanc::WST_TOKENTYPE;
*WST_REQUESTEDSECURITYTOKEN = *openwsmanc::WST_REQUESTEDSECURITYTOKEN;
*WSSE_USERNAMETOKEN = *openwsmanc::WSSE_USERNAMETOKEN;
*WSSE_USERNAME = *openwsmanc::WSSE_USERNAME;
*WSSE_PASSWORD = *openwsmanc::WSSE_PASSWORD;
*WSP_APPLIESTO = *openwsmanc::WSP_APPLIESTO;
*WST_USERNAMETOKEN = *openwsmanc::WST_USERNAMETOKEN;
*WST_CERTIFICATETHUMBPRINT = *openwsmanc::WST_CERTIFICATETHUMBPRINT;
*WSMAN_SECURITY_PROFILE_HTTP_BASIC = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTP_BASIC;
*WSMAN_SECURITY_PROFILE_HTTP_DIGEST = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTP_DIGEST;
*WSMAN_SECURITY_PROFILE_HTTPS_BASIC = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_BASIC;
*WSMAN_SECURITY_PROFILE_HTTPS_DIGEST = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_DIGEST;
*WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL;
*WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL_BASIC = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL_BASIC;
*WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL_DIGEST = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL_DIGEST;
*WSMAN_SECURITY_PROFILE_HTTPS_SPNEGO_KERBEROS = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_SPNEGO_KERBEROS;
*WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL_SPNEGO_KERBEROS = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTPS_MUTUAL_SPNEGO_KERBEROS;
*WSMAN_SECURITY_PROFILE_HTTP_SPNEGO_KERBEROS = *openwsmanc::WSMAN_SECURITY_PROFILE_HTTP_SPNEGO_KERBEROS;
*FLAG_NONE = *openwsmanc::FLAG_NONE;
*FLAG_ENUMERATION_COUNT_ESTIMATION = *openwsmanc::FLAG_ENUMERATION_COUNT_ESTIMATION;
*FLAG_ENUMERATION_OPTIMIZATION = *openwsmanc::FLAG_ENUMERATION_OPTIMIZATION;
*FLAG_ENUMERATION_ENUM_EPR = *openwsmanc::FLAG_ENUMERATION_ENUM_EPR;
*FLAG_ENUMERATION_ENUM_OBJ_AND_EPR = *openwsmanc::FLAG_ENUMERATION_ENUM_OBJ_AND_EPR;
*FLAG_DUMP_REQUEST = *openwsmanc::FLAG_DUMP_REQUEST;
*FLAG_INCLUDESUBCLASSPROPERTIES = *openwsmanc::FLAG_INCLUDESUBCLASSPROPERTIES;
*FLAG_EXCLUDESUBCLASSPROPERTIES = *openwsmanc::FLAG_EXCLUDESUBCLASSPROPERTIES;
*FLAG_POLYMORPHISM_NONE = *openwsmanc::FLAG_POLYMORPHISM_NONE;
*FLAG_MUND_MAX_ESIZE = *openwsmanc::FLAG_MUND_MAX_ESIZE;
*FLAG_MUND_LOCALE = *openwsmanc::FLAG_MUND_LOCALE;
*FLAG_MUND_OPTIONSET = *openwsmanc::FLAG_MUND_OPTIONSET;
*FLAG_MUND_FRAGMENT = *openwsmanc::FLAG_MUND_FRAGMENT;
*FLAG_CIM_EXTENSIONS = *openwsmanc::FLAG_CIM_EXTENSIONS;
*FLAG_CIM_REFERENCES = *openwsmanc::FLAG_CIM_REFERENCES;
*FLAG_CIM_ASSOCIATORS = *openwsmanc::FLAG_CIM_ASSOCIATORS;
*FLAG_EVENT_SENDBOOKMARK = *openwsmanc::FLAG_EVENT_SENDBOOKMARK;
*FLAG_CIM_SCHEMA_OPT = *openwsmanc::FLAG_CIM_SCHEMA_OPT;
*WSMAN_DELIVERY_PUSH = *openwsmanc::WSMAN_DELIVERY_PUSH;
*WSMAN_DELIVERY_PUSHWITHACK = *openwsmanc::WSMAN_DELIVERY_PUSHWITHACK;
*WSMAN_DELIVERY_EVENTS = *openwsmanc::WSMAN_DELIVERY_EVENTS;
*WSMAN_DELIVERY_PULL = *openwsmanc::WSMAN_DELIVERY_PULL;
*WS_NO_AUTH = *openwsmanc::WS_NO_AUTH;
*WS_BASIC_AUTH = *openwsmanc::WS_BASIC_AUTH;
*WS_DIGEST_AUTH = *openwsmanc::WS_DIGEST_AUTH;
*WS_PASS_AUTH = *openwsmanc::WS_PASS_AUTH;
*WS_NTLM_AUTH = *openwsmanc::WS_NTLM_AUTH;
*WS_GSSNEGOTIATE_AUTH = *openwsmanc::WS_GSSNEGOTIATE_AUTH;
*WS_MAX_AUTH = *openwsmanc::WS_MAX_AUTH;
*WSMAN_DELIVERY_SEC_AUTO = *openwsmanc::WSMAN_DELIVERY_SEC_AUTO;
*WSMAN_DELIVERY_SEC_HTTP_BASIC = *openwsmanc::WSMAN_DELIVERY_SEC_HTTP_BASIC;
*WSMAN_DELIVERY_SEC_HTTP_DIGEST = *openwsmanc::WSMAN_DELIVERY_SEC_HTTP_DIGEST;
*WSMAN_DELIVERY_SEC_HTTPS_BASIC = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_BASIC;
*WSMAN_DELIVERY_SEC_HTTPS_DIGEST = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_DIGEST;
*WSMAN_DELIVERY_SEC_HTTPS_MUTUAL = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_MUTUAL;
*WSMAN_DELIVERY_SEC_HTTPS_MUTUAL_BASIC = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_MUTUAL_BASIC;
*WSMAN_DELIVERY_SEC_HTTPS_MUTUAL_DIGEST = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_MUTUAL_DIGEST;
*WSMAN_DELIVERY_SEC_HTTPS_SPNEGO_KERBEROS = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_SPNEGO_KERBEROS;
*WSMAN_DELIVERY_SEC_HTTPS_MUTUAL_SPNEGO_KERBEROS = *openwsmanc::WSMAN_DELIVERY_SEC_HTTPS_MUTUAL_SPNEGO_KERBEROS;
*WSMAN_DELIVERY_SEC_HTTP_SPNEGO_KERBEROS = *openwsmanc::WSMAN_DELIVERY_SEC_HTTP_SPNEGO_KERBEROS;
*FAULT_SENDER_CODE = *openwsmanc::FAULT_SENDER_CODE;
*FAULT_MUSTUNDERSTAND_CODE = *openwsmanc::FAULT_MUSTUNDERSTAND_CODE;
*FAULT_RECEIVER_CODE = *openwsmanc::FAULT_RECEIVER_CODE;
*FAULT_SENDER_CODE_NS = *openwsmanc::FAULT_SENDER_CODE_NS;
*FAULT_RECEIVER_CODE_NS = *openwsmanc::FAULT_RECEIVER_CODE_NS;
*FAULT_MUSTUNDERSTAND_CODE_NS = *openwsmanc::FAULT_MUSTUNDERSTAND_CODE_NS;
*WSMAN_RC_OK = *openwsmanc::WSMAN_RC_OK;
*WSMAN_ACCESS_DENIED = *openwsmanc::WSMAN_ACCESS_DENIED;
*WSA_ACTION_NOT_SUPPORTED = *openwsmanc::WSA_ACTION_NOT_SUPPORTED;
*WSMAN_ALREADY_EXISTS = *openwsmanc::WSMAN_ALREADY_EXISTS;
*WSEN_CANNOT_PROCESS_FILTER = *openwsmanc::WSEN_CANNOT_PROCESS_FILTER;
*WSMAN_CANNOT_PROCESS_FILTER = *openwsmanc::WSMAN_CANNOT_PROCESS_FILTER;
*WSMAN_CONCURRENCY = *openwsmanc::WSMAN_CONCURRENCY;
*WSE_DELIVERY_MODE_REQUESTED_UNAVAILABLE = *openwsmanc::WSE_DELIVERY_MODE_REQUESTED_UNAVAILABLE;
*WSMAN_DELIVERY_REFUSED = *openwsmanc::WSMAN_DELIVERY_REFUSED;
*WSA_DESTINATION_UNREACHABLE = *openwsmanc::WSA_DESTINATION_UNREACHABLE;
*WSMAN_ENCODING_LIMIT = *openwsmanc::WSMAN_ENCODING_LIMIT;
*WSA_ENDPOINT_UNAVAILABLE = *openwsmanc::WSA_ENDPOINT_UNAVAILABLE;
*WSMAN_EVENT_DELIVER_TO_UNUSABLE = *openwsmanc::WSMAN_EVENT_DELIVER_TO_UNUSABLE;
*WSE_EVENT_SOURCE_UNABLE_TO_PROCESS = *openwsmanc::WSE_EVENT_SOURCE_UNABLE_TO_PROCESS;
*WSEN_FILTER_DIALECT_REQUESTED_UNAVAILABLE = *openwsmanc::WSEN_FILTER_DIALECT_REQUESTED_UNAVAILABLE;
*WSE_FILTERING_NOT_SUPPORTED = *openwsmanc::WSE_FILTERING_NOT_SUPPORTED;
*WSEN_FILTERING_NOT_SUPPORTED = *openwsmanc::WSEN_FILTERING_NOT_SUPPORTED;
*WSE_FILTERING_REQUESTED_UNAVAILABLE = *openwsmanc::WSE_FILTERING_REQUESTED_UNAVAILABLE;
*WSMAN_FRAGMENT_DIALECT_NOT_SUPPORTED = *openwsmanc::WSMAN_FRAGMENT_DIALECT_NOT_SUPPORTED;
*WSMAN_INTERNAL_ERROR = *openwsmanc::WSMAN_INTERNAL_ERROR;
*WSMAN_INVALID_BOOKMARK = *openwsmanc::WSMAN_INVALID_BOOKMARK;
*WSEN_INVALID_ENUMERATION_CONTEXT = *openwsmanc::WSEN_INVALID_ENUMERATION_CONTEXT;
*WSE_INVALID_EXPIRATION_TIME = *openwsmanc::WSE_INVALID_EXPIRATION_TIME;
*WSEN_INVALID_EXPIRATION_TIME = *openwsmanc::WSEN_INVALID_EXPIRATION_TIME;
*WSE_INVALID_MESSAGE = *openwsmanc::WSE_INVALID_MESSAGE;
*WSA_INVALID_MESSAGE_INFORMATION_HEADER = *openwsmanc::WSA_INVALID_MESSAGE_INFORMATION_HEADER;
*WSMAN_INVALID_OPTIONS = *openwsmanc::WSMAN_INVALID_OPTIONS;
*WSMAN_INVALID_PARAMETER = *openwsmanc::WSMAN_INVALID_PARAMETER;
*WXF_INVALID_REPRESENTATION = *openwsmanc::WXF_INVALID_REPRESENTATION;
*WSMAN_INVALID_SELECTORS = *openwsmanc::WSMAN_INVALID_SELECTORS;
*WSA_MESSAGE_INFORMATION_HEADER_REQUIRED = *openwsmanc::WSA_MESSAGE_INFORMATION_HEADER_REQUIRED;
*WSMAN_NO_ACK = *openwsmanc::WSMAN_NO_ACK;
*WSMAN_QUOTA_LIMIT = *openwsmanc::WSMAN_QUOTA_LIMIT;
*WSMAN_SCHEMA_VALIDATION_ERROR = *openwsmanc::WSMAN_SCHEMA_VALIDATION_ERROR;
*WSEN_TIMED_OUT = *openwsmanc::WSEN_TIMED_OUT;
*WSMAN_TIMED_OUT = *openwsmanc::WSMAN_TIMED_OUT;
*WSE_UNABLE_TO_RENEW = *openwsmanc::WSE_UNABLE_TO_RENEW;
*WSE_UNSUPPORTED_EXPIRATION_TYPE = *openwsmanc::WSE_UNSUPPORTED_EXPIRATION_TYPE;
*WSEN_UNSUPPORTED_EXPIRATION_TYPE = *openwsmanc::WSEN_UNSUPPORTED_EXPIRATION_TYPE;
*WSMAN_UNSUPPORTED_FEATURE = *openwsmanc::WSMAN_UNSUPPORTED_FEATURE;
*SOAP_FAULT_VERSION_MISMATCH = *openwsmanc::SOAP_FAULT_VERSION_MISMATCH;
*SOAP_FAULT_MUSTUNDERSTAND = *openwsmanc::SOAP_FAULT_MUSTUNDERSTAND;
*WSMB_POLYMORPHISM_MODE_NOT_SUPPORTED = *openwsmanc::WSMB_POLYMORPHISM_MODE_NOT_SUPPORTED;
*WSMAN_UNKNOWN = *openwsmanc::WSMAN_UNKNOWN;
*WSMAN_DETAIL_OK = *openwsmanc::WSMAN_DETAIL_OK;
*WSMAN_DETAIL_ACK = *openwsmanc::WSMAN_DETAIL_ACK;
*WSMAN_DETAIL_ACTION_MISMATCH = *openwsmanc::WSMAN_DETAIL_ACTION_MISMATCH;
*WSMAN_DETAIL_ALREADY_EXISTS = *openwsmanc::WSMAN_DETAIL_ALREADY_EXISTS;
*WSMAN_DETAIL_AMBIGUOUS_SELECTORS = *openwsmanc::WSMAN_DETAIL_AMBIGUOUS_SELECTORS;
*WSMAN_DETAIL_ASYNCHRONOUS_REQUEST = *openwsmanc::WSMAN_DETAIL_ASYNCHRONOUS_REQUEST;
*WSMAN_DETAIL_ADDRESSING_MODE = *openwsmanc::WSMAN_DETAIL_ADDRESSING_MODE;
*WSMAN_DETAIL_AUTHERIZATION_MODE = *openwsmanc::WSMAN_DETAIL_AUTHERIZATION_MODE;
*WSMAN_DETAIL_BOOKMARKS = *openwsmanc::WSMAN_DETAIL_BOOKMARKS;
*WSMAN_DETAIL_CHARECHTER_SET = *openwsmanc::WSMAN_DETAIL_CHARECHTER_SET;
*WSMAN_DETAIL_DELIVERY_RETRIES = *openwsmanc::WSMAN_DETAIL_DELIVERY_RETRIES;
*WSMAN_DETAIL_DUPLICATE_SELECTORS = *openwsmanc::WSMAN_DETAIL_DUPLICATE_SELECTORS;
*WSMAN_DETAIL_ENCODING_TYPE = *openwsmanc::WSMAN_DETAIL_ENCODING_TYPE;
*WSMAN_DETAIL_ENUMERATION_MODE = *openwsmanc::WSMAN_DETAIL_ENUMERATION_MODE;
*WSMAN_DETAIL_EXPIRATION_TIME = *openwsmanc::WSMAN_DETAIL_EXPIRATION_TIME;
*WSMAN_DETAIL_EXPIRED = *openwsmanc::WSMAN_DETAIL_EXPIRED;
*WSMAN_DETAIL_FILTERING_REQUIRED = *openwsmanc::WSMAN_DETAIL_FILTERING_REQUIRED;
*WSMAN_DETAIL_FORMAT_MISMATCH = *openwsmanc::WSMAN_DETAIL_FORMAT_MISMATCH;
*WSMAN_DETAIL_FORMAT_SECURITY_TOKEN = *openwsmanc::WSMAN_DETAIL_FORMAT_SECURITY_TOKEN;
*WSMAN_DETAIL_FRAGMENT_LEVEL_ACCESS = *openwsmanc::WSMAN_DETAIL_FRAGMENT_LEVEL_ACCESS;
*WSMAN_DETAIL_HEARTBEATS = *openwsmanc::WSMAN_DETAIL_HEARTBEATS;
*WSMAN_DETAIL_INSECURE_ADDRESS = *openwsmanc::WSMAN_DETAIL_INSECURE_ADDRESS;
*WSMAN_DETAIL_INSUFFICIENT_SELECTORS = *openwsmanc::WSMAN_DETAIL_INSUFFICIENT_SELECTORS;
*WSMAN_DETAIL_INVALID = *openwsmanc::WSMAN_DETAIL_INVALID;
*WSMAN_DETAIL_INVALID_ADDRESS = *openwsmanc::WSMAN_DETAIL_INVALID_ADDRESS;
*WSMAN_DETAIL_INVALID_FORMAT = *openwsmanc::WSMAN_DETAIL_INVALID_FORMAT;
*WSMAN_DETAIL_INVALID_FRAGMENT = *openwsmanc::WSMAN_DETAIL_INVALID_FRAGMENT;
*WSMAN_DETAIL_INVALID_NAME = *openwsmanc::WSMAN_DETAIL_INVALID_NAME;
*WSMAN_DETAIL_INVALID_NAMESPACE = *openwsmanc::WSMAN_DETAIL_INVALID_NAMESPACE;
*WSMAN_DETAIL_INVALID_RESOURCEURI = *openwsmanc::WSMAN_DETAIL_INVALID_RESOURCEURI;
*WSMAN_DETAIL_INVALID_SELECTOR_ASSIGNMENT = *openwsmanc::WSMAN_DETAIL_INVALID_SELECTOR_ASSIGNMENT;
*WSMAN_DETAIL_INVALID_SYSTEM = *openwsmanc::WSMAN_DETAIL_INVALID_SYSTEM;
*WSMAN_DETAIL_INVALID_TIMEOUT = *openwsmanc::WSMAN_DETAIL_INVALID_TIMEOUT;
*WSMAN_DETAIL_INVALID_VALUE = *openwsmanc::WSMAN_DETAIL_INVALID_VALUE;
*WSMAN_DETAIL_INVALID_VALUES = *openwsmanc::WSMAN_DETAIL_INVALID_VALUES;
*WSMAN_DETAIL_LOCALE = *openwsmanc::WSMAN_DETAIL_LOCALE;
*WSMAN_DETAIL_MAX_ELEMENTS = *openwsmanc::WSMAN_DETAIL_MAX_ELEMENTS;
*WSMAN_DETAIL_MAX_ENVELOPE_POLICY = *openwsmanc::WSMAN_DETAIL_MAX_ENVELOPE_POLICY;
*WSMAN_DETAIL_MAX_ENVELOPE_SIZE = *openwsmanc::WSMAN_DETAIL_MAX_ENVELOPE_SIZE;
*WSMAN_DETAIL_MAX_TIME = *openwsmanc::WSMAN_DETAIL_MAX_TIME;
*WSMAN_DETAIL_MINIMUM_ENVELOPE_LIMIT = *openwsmanc::WSMAN_DETAIL_MINIMUM_ENVELOPE_LIMIT;
*WSMAN_DETAIL_MISSING_VALUES = *openwsmanc::WSMAN_DETAIL_MISSING_VALUES;
*WSMAN_DETAIL_NOT_SUPPORTED = *openwsmanc::WSMAN_DETAIL_NOT_SUPPORTED;
*WSMAN_DETAIL_OPERATION_TIMEOUT = *openwsmanc::WSMAN_DETAIL_OPERATION_TIMEOUT;
*WSMAN_DETAIL_OPTION_LIMIT = *openwsmanc::WSMAN_DETAIL_OPTION_LIMIT;
*WSMAN_DETAIL_OPTION_SET = *openwsmanc::WSMAN_DETAIL_OPTION_SET;
*WSMAN_DETAIL_READ_ONLY = *openwsmanc::WSMAN_DETAIL_READ_ONLY;
*WSMAN_DETAIL_RESOURCE_OFFLINE = *openwsmanc::WSMAN_DETAIL_RESOURCE_OFFLINE;
*WSMAN_DETAIL_RENAME = *openwsmanc::WSMAN_DETAIL_RENAME;
*WSMAN_DETAIL_SELECTOR_LIMIT = *openwsmanc::WSMAN_DETAIL_SELECTOR_LIMIT;
*WSMAN_DETAIL_SERVICE_ENVELOPE_LIMIT = *openwsmanc::WSMAN_DETAIL_SERVICE_ENVELOPE_LIMIT;
*WSMAN_DETAIL_TARGET_ALREADY_EXISTS = *openwsmanc::WSMAN_DETAIL_TARGET_ALREADY_EXISTS;
*WSMAN_DETAIL_TYPE_MISMATCH = *openwsmanc::WSMAN_DETAIL_TYPE_MISMATCH;
*WSMAN_DETAIL_UNEXPECTED_SELECTORS = *openwsmanc::WSMAN_DETAIL_UNEXPECTED_SELECTORS;
*WSMAN_DETAIL_UNREPORTABLE_SUCCESS = *openwsmanc::WSMAN_DETAIL_UNREPORTABLE_SUCCESS;
*WSMAN_DETAIL_UNUSABLE_ADDRESS = *openwsmanc::WSMAN_DETAIL_UNUSABLE_ADDRESS;
*WSMAN_DETAIL_URI_LIMIT_EXCEEDED = *openwsmanc::WSMAN_DETAIL_URI_LIMIT_EXCEEDED;
*WSMAN_DETAIL_WHITESPACE = *openwsmanc::WSMAN_DETAIL_WHITESPACE;
*WSA_DETAIL_DUPLICATE_MESSAGE_ID = *openwsmanc::WSA_DETAIL_DUPLICATE_MESSAGE_ID;
*SOAP_DETAIL_HEADER_NOT_UNDERSTOOD = *openwsmanc::SOAP_DETAIL_HEADER_NOT_UNDERSTOOD;
*WST_DETAIL_UNSUPPORTED_TOKENTYPE = *openwsmanc::WST_DETAIL_UNSUPPORTED_TOKENTYPE;
*WSP_DETAIL_INVALID_EPR = *openwsmanc::WSP_DETAIL_INVALID_EPR;
*OWSMAN_DETAIL_ENDPOINT_ERROR = *openwsmanc::OWSMAN_DETAIL_ENDPOINT_ERROR;
*OWSMAN_NO_DETAILS = *openwsmanc::OWSMAN_NO_DETAILS;
*OWSMAN_SYSTEM_ERROR = *openwsmanc::OWSMAN_SYSTEM_ERROR;
*WSMAN_STATUS_NONE = *openwsmanc::WSMAN_STATUS_NONE;
*WSMAN_STATUS_CANCELLED = *openwsmanc::WSMAN_STATUS_CANCELLED;
*WSMAN_STATUS_CANT_RESOLVE = *openwsmanc::WSMAN_STATUS_CANT_RESOLVE;
*WSMAN_STATUS_CANT_RESOLVE_PROXY = *openwsmanc::WSMAN_STATUS_CANT_RESOLVE_PROXY;
*WSMAN_STATUS_CANT_CONNECT = *openwsmanc::WSMAN_STATUS_CANT_CONNECT;
*WSMAN_STATUS_CANT_CONNECT_PROXY = *openwsmanc::WSMAN_STATUS_CANT_CONNECT_PROXY;
*WSMAN_STATUS_SSL_FAILED = *openwsmanc::WSMAN_STATUS_SSL_FAILED;
*WSMAN_STATUS_IO_ERROR = *openwsmanc::WSMAN_STATUS_IO_ERROR;
*WSMAN_STATUS_MALFORMED = *openwsmanc::WSMAN_STATUS_MALFORMED;
*WSMAN_STATUS_TRY_AGAIN = *openwsmanc::WSMAN_STATUS_TRY_AGAIN;
*WSMAN_STATUS_CONTINUE = *openwsmanc::WSMAN_STATUS_CONTINUE;
*WSMAN_STATUS_SWITCHING_PROTOCOLS = *openwsmanc::WSMAN_STATUS_SWITCHING_PROTOCOLS;
*WSMAN_STATUS_PROCESSING = *openwsmanc::WSMAN_STATUS_PROCESSING;
*WSMAN_STATUS_OK = *openwsmanc::WSMAN_STATUS_OK;
*WSMAN_STATUS_CREATED = *openwsmanc::WSMAN_STATUS_CREATED;
*WSMAN_STATUS_ACCEPTED = *openwsmanc::WSMAN_STATUS_ACCEPTED;
*WSMAN_STATUS_NON_AUTHORITATIVE = *openwsmanc::WSMAN_STATUS_NON_AUTHORITATIVE;
*WSMAN_STATUS_NO_CONTENT = *openwsmanc::WSMAN_STATUS_NO_CONTENT;
*WSMAN_STATUS_RESET_CONTENT = *openwsmanc::WSMAN_STATUS_RESET_CONTENT;
*WSMAN_STATUS_PARTIAL_CONTENT = *openwsmanc::WSMAN_STATUS_PARTIAL_CONTENT;
*WSMAN_STATUS_MULTI_STATUS = *openwsmanc::WSMAN_STATUS_MULTI_STATUS;
*WSMAN_STATUS_MULTIPLE_CHOICES = *openwsmanc::WSMAN_STATUS_MULTIPLE_CHOICES;
*WSMAN_STATUS_MOVED_PERMANENTLY = *openwsmanc::WSMAN_STATUS_MOVED_PERMANENTLY;
*WSMAN_STATUS_FOUND = *openwsmanc::WSMAN_STATUS_FOUND;
*WSMAN_STATUS_MOVED_TEMPORARILY = *openwsmanc::WSMAN_STATUS_MOVED_TEMPORARILY;
*WSMAN_STATUS_SEE_OTHER = *openwsmanc::WSMAN_STATUS_SEE_OTHER;
*WSMAN_STATUS_NOT_MODIFIED = *openwsmanc::WSMAN_STATUS_NOT_MODIFIED;
*WSMAN_STATUS_USE_PROXY = *openwsmanc::WSMAN_STATUS_USE_PROXY;
*WSMAN_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL = *openwsmanc::WSMAN_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL;
*WSMAN_STATUS_TEMPORARY_REDIRECT = *openwsmanc::WSMAN_STATUS_TEMPORARY_REDIRECT;
*WSMAN_STATUS_BAD_REQUEST = *openwsmanc::WSMAN_STATUS_BAD_REQUEST;
*WSMAN_STATUS_UNAUTHORIZED = *openwsmanc::WSMAN_STATUS_UNAUTHORIZED;
*WSMAN_STATUS_PAYMENT_REQUIRED = *openwsmanc::WSMAN_STATUS_PAYMENT_REQUIRED;
*WSMAN_STATUS_FORBIDDEN = *openwsmanc::WSMAN_STATUS_FORBIDDEN;
*WSMAN_STATUS_NOT_FOUND = *openwsmanc::WSMAN_STATUS_NOT_FOUND;
*WSMAN_STATUS_METHOD_NOT_ALLOWED = *openwsmanc::WSMAN_STATUS_METHOD_NOT_ALLOWED;
*WSMAN_STATUS_NOT_ACCEPTABLE = *openwsmanc::WSMAN_STATUS_NOT_ACCEPTABLE;
*WSMAN_STATUS_PROXY_AUTHENTICATION_REQUIRED = *openwsmanc::WSMAN_STATUS_PROXY_AUTHENTICATION_REQUIRED;
*WSMAN_STATUS_PROXY_UNAUTHORIZED = *openwsmanc::WSMAN_STATUS_PROXY_UNAUTHORIZED;
*WSMAN_STATUS_REQUEST_TIMEOUT = *openwsmanc::WSMAN_STATUS_REQUEST_TIMEOUT;
*WSMAN_STATUS_CONFLICT = *openwsmanc::WSMAN_STATUS_CONFLICT;
*WSMAN_STATUS_GONE = *openwsmanc::WSMAN_STATUS_GONE;
*WSMAN_STATUS_LENGTH_REQUIRED = *openwsmanc::WSMAN_STATUS_LENGTH_REQUIRED;
*WSMAN_STATUS_PRECONDITION_FAILED = *openwsmanc::WSMAN_STATUS_PRECONDITION_FAILED;
*WSMAN_STATUS_REQUEST_ENTITY_TOO_LARGE = *openwsmanc::WSMAN_STATUS_REQUEST_ENTITY_TOO_LARGE;
*WSMAN_STATUS_REQUEST_URI_TOO_LONG = *openwsmanc::WSMAN_STATUS_REQUEST_URI_TOO_LONG;
*WSMAN_STATUS_UNSUPPORTED_MEDIA_TYPE = *openwsmanc::WSMAN_STATUS_UNSUPPORTED_MEDIA_TYPE;
*WSMAN_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = *openwsmanc::WSMAN_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE;
*WSMAN_STATUS_INVALID_RANGE = *openwsmanc::WSMAN_STATUS_INVALID_RANGE;
*WSMAN_STATUS_EXPECTATION_FAILED = *openwsmanc::WSMAN_STATUS_EXPECTATION_FAILED;
*WSMAN_STATUS_UNPROCESSABLE_ENTITY = *openwsmanc::WSMAN_STATUS_UNPROCESSABLE_ENTITY;
*WSMAN_STATUS_LOCKED = *openwsmanc::WSMAN_STATUS_LOCKED;
*WSMAN_STATUS_FAILED_DEPENDENCY = *openwsmanc::WSMAN_STATUS_FAILED_DEPENDENCY;
*WSMAN_STATUS_INTERNAL_SERVER_ERROR = *openwsmanc::WSMAN_STATUS_INTERNAL_SERVER_ERROR;
*WSMAN_STATUS_NOT_IMPLEMENTED = *openwsmanc::WSMAN_STATUS_NOT_IMPLEMENTED;
*WSMAN_STATUS_BAD_GATEWAY = *openwsmanc::WSMAN_STATUS_BAD_GATEWAY;
*WSMAN_STATUS_SERVICE_UNAVAILABLE = *openwsmanc::WSMAN_STATUS_SERVICE_UNAVAILABLE;
*WSMAN_STATUS_GATEWAY_TIMEOUT = *openwsmanc::WSMAN_STATUS_GATEWAY_TIMEOUT;
*WSMAN_STATUS_HTTP_VERSION_NOT_SUPPORTED = *openwsmanc::WSMAN_STATUS_HTTP_VERSION_NOT_SUPPORTED;
*WSMAN_STATUS_INSUFFICIENT_STORAGE = *openwsmanc::WSMAN_STATUS_INSUFFICIENT_STORAGE;
*WSMAN_STATUS_NOT_EXTENDED = *openwsmanc::WSMAN_STATUS_NOT_EXTENDED;
*NO_AUTH = *openwsmanc::NO_AUTH;
*BASIC_AUTH = *openwsmanc::BASIC_AUTH;
*DIGEST_AUTH = *openwsmanc::DIGEST_AUTH;
*PASS_AUTH = *openwsmanc::PASS_AUTH;
*NTLM_AUTH = *openwsmanc::NTLM_AUTH;
*GSSNEGOTIATE_AUTH = *openwsmanc::GSSNEGOTIATE_AUTH;
*NO_AUTH_STR = *openwsmanc::NO_AUTH_STR;
*BASIC_AUTH_STR = *openwsmanc::BASIC_AUTH_STR;
*DIGEST_AUTH_STR = *openwsmanc::DIGEST_AUTH_STR;
*PASS_AUTH_STR = *openwsmanc::PASS_AUTH_STR;
*NTLM_AUTH_STR = *openwsmanc::NTLM_AUTH_STR;
*GSSNEGOTIATE_AUTH_STR = *openwsmanc::GSSNEGOTIATE_AUTH_STR;
*TRUE = *openwsmanc::TRUE;
*FALSE = *openwsmanc::FALSE;
*DEFAULT_USER_AGENT = *openwsmanc::DEFAULT_USER_AGENT;
1;
